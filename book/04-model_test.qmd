# Model Analysis {#sec-modelanalysis}

## Load model and data

The trained model, calibration and validation data are loaded.
```{r}
# Load random forest model
rf_bor   <- readRDS(here::here("data/rf_for_pH0-10.rds"))
df_train <- readRDS(here::here("data/cal_for_ph0-10.rds"))
df_test  <- readRDS(here::here("data/val_for_ph0-10.rds"))
```

Next, we load a mask of the area over which the soil will be mapped.
Our target area to predict over is defined in the file `area_to_be_mapped.tif`. Since we only want to predict on a given study area, the TIF file comes with a labeling of `0` for pixels that are outside the area of interest and `1` for pixels within the area of interest.

```{r}
# Load area to be predicted
raster_mask <- terra::rast(here::here("data-raw/geodata/study_area/area_to_be_mapped.tif"))

# Turn target raster into a dataframe, 1 px = 1 cell
df_mask <- as.data.frame(raster_mask, xy = TRUE)

# Filter only for area of interest
df_mask <- df_mask |> 
  dplyr::filter(area_to_be_mapped == 1)

# Display df
head(df_mask) |> 
  knitr::kable()
```

Next, we have to load the selected set of covariates as maps. These will be as the basis for spatial upscaling and provide the predictor values across space, fed into the trained model for predicting soil pH across space.

Get a list of all available covariate file names.
```{r}
files_covariates <- list.files(
  path = here::here("data-raw/geodata/covariates/"), 
  pattern = ".tif$",
  recursive = TRUE, 
  full.names = TRUE
  )
```

Note that the predictor rasters have to have the same resolution, extent, and coordinate reference system. This is the case as shown for two randomly picked examples.
```{r}
random_files <- sample(files_covariates, 2)
terra::rast(random_files[1])
terra::rast(random_files[2])
```

Load the rasters for the selected predictor variables into a raster object (a "stack" of multiple rasters).
```{r}
# Filter that list only for the variables used in the RF
preds_selected <- names(rf_bor$forest$covariate.levels)
files_selected <- files_covariates[apply(sapply(X = preds_selected, 
                                            FUN = grepl, 
                                            files_covariates), 
                                     MARGIN =  1, 
                                     FUN = any)]

# Load all rasters as a stack
raster_covariates <- terra::rast(files_selected)
```

Convert the raster stack into a dataframe - the preferred format for model prediction.
```{r}
# Get coordinates for which we want data
df_locations <- df_mask |> 
  dplyr::select(x, y)

# Extract data from covariate raster stack for all gridcells in the raster
df_predict <- terra::extract(
  raster_covariates,   # The raster we want to extract from
  df_locations,        # A matrix of x and y values to extract for
  ID = FALSE           # To not add a default ID column to the output
  )

df_predict <- cbind(df_locations, df_predict) |> 
  tidyr::drop_na()  # Se_TWI2m has a small number of missing data
```

## Model testing

### Make predictions

To test our model for how well it predicts on data it has not used during model training, we first have to load the {ranger} package to load all functionalities to run a Random Forest with the `predict()` function. Alongside our model, we feed our validation data into the function and set its parallelization settings to use all but one of our computer's cores.

```{r}
# Need to load {ranger} because ranger-object is used in predict()
library(ranger) 

# Make predictions for validation sites
prediction <- predict(
  rf_bor,           # RF model
  data = df_test,   # Predictor data
  num.threads = parallel::detectCores() - 1
  )

# Save predictions to validation df
df_test$pred <- prediction$predictions
```

### Model metrics

Now that we have our predictions ready, we can extract standard metrics for a classification problem (see [AGDS Chapter 8.2.2](https://geco-bern.github.io/agds/regressionclassification.html#regression)).

```{r}
# Calculate error
err <- df_test$ph.0.10 - df_test$pred

# Calculate bias
bias <- mean(err, na.rm = TRUE) |> round(2)

# Calculate RMSE
rmse <- sqrt(mean(err, na.rm = TRUE)) |> round(2)

# Calculate R2
r2 <- cor(df_test$ph.0.10, df_test$pred, method = "pearson")^2 |> round(2)
```

### Metric plots

```{r}
#| label: fig-ph-modobs
#| fig-cap: "Comparison of observed versus predicted values for top soil pH using a simple Random Forest model."

df_test |> 
  ggplot2::ggplot(ggplot2::aes(x = pred, y = ph.0.10)) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth(method = "lm",
                       color = "tomato") +
  ggplot2::theme_classic() +
  ggplot2::geom_abline(
    intercept = 0, 
    slope = 1, 
    linetype = "dotted") +
  ggplot2::ylim(5, 7.5) +
  ggplot2::xlim(5, 7.5) +
  ggplot2::labs(
    title = "Predicted vs. Observed soil pH 0-10 cm",
    subtitle = bquote(paste("Bias = ", .(bias), 
                            ", RMSE = ", .(rmse), 
                            ", R"^2, " = ", .(r2))),
    x = "Predicted pH",
    y = "Observed pH"
  )
```

The plot shows that our model explains about half of the observed variation in soil pH. Yet, we can also see that the model tends to overestimate low pH values. Anyways, let's move ahead.

## Create prediction maps

The fitted and tested model can now be used for spatially upscaling - creating a map of top soil pH values across our study area. For this, we again make predictions with our Random Forest model but we use our covariates dataframe for the study area, instead of only at the sampling locations as done above.

```{r}
# Make predictions using the RF model
prediction <- predict(
  rf_bor,              # RF model
  data = df_predict,   
  num.threads = parallel::detectCores() - 1)

# Attach predictions to dataframe and round them
df_predict$prediction <- prediction$predictions
```

```{r}
# Extract dataframe with coordinates and predictions
df_map <- df_predict |>
  dplyr::select(x, y, prediction)

# Turn dataframe into a raster
raster_pred <- terra::rast(
  df_map,                  # Table to be transformed
  crs = "+init=epsg:2056", # Swiss coordinate system
  extent = terra::ext(raster_covariates) # Prescribe same extent as predictor rasters
  )
```

```{r}
#| label: fig-ph-prediction-map
#| fig-cap: "Predicted map of top soil pH using a simple Random Forest model."

# Let's have a look at our predictions!
# To have some more flexibility, we can plot this in the ggplot-style as such:
ggplot2::ggplot() +
  tidyterra::geom_spatraster(data = raster_pred) +
  ggplot2::scale_fill_viridis_c(
    na.value = NA,
    option = "viridis",
    name = "pH"
    ) +
  ggplot2::theme_classic() +
  ggplot2::scale_x_continuous(expand = c(0, 0)) +
  ggplot2::scale_y_continuous(expand = c(0, 0)) +
  ggplot2::labs(title = "Predicted soil pH (0 - 10cm)")
```

Interesting, we see that in this study area, there is a tendency of having more acidic soils towards the south west and more basic soils towards the north east. 

Let's write the predicted top soil pH raster into a GeoTIFF file.

```{r eval=FALSE}
# Save raster as .tif file
terra::writeRaster(
  raster_pred,
  "../data/ra_predicted_ph0-10.tif",
  datatype = "FLT4S",  # FLT4S for floats, INT1U for integers (smaller file)
  filetype = "GTiff",  # GeoTiff format
  overwrite = TRUE     # Overwrite existing file
)
```

## Modelling a categorical variable

The example for digital soil mapping given above is for top soil pH - a continuous variable. Other soil characteristics are described by categorical variables. Below, the model training - testing - prediction workflow is demonstrated for a categorical target variable: `waterlog.30` - a logical variable specifying whether the soil was waterlogged at 30 cm depth.

### Data preparation

```{r}
# load data containing observations and covariates
df_full <- readRDS(here::here("data/df_full.rds"))

# Specify target and predictors
target <- "waterlog.30" # Pick water status at 30 cm

# Make sure that target is encoded as factor.
df_full[[target]] <- factor(df_full[[target]],
                            levels = c(0, 1),
                            labels = c("dry", "wet"))

cat("Target is encoded so that a model predicts the probability that the soil at 30cm is: ",
    levels(df_full[[target]])[1])
```

```{r}
# Specify predictors_all: Remove soil sampling and observational data
predictors_all <- names(df_full)[14:ncol(df_full)]

# Split dataset into calibration and validation
df_train <- df_full |> dplyr::filter(dataset == "calibration")
df_test  <- df_full |> dplyr::filter(dataset == "validation")

# Filter out any NA to avoid error when running a Random Forest
df_train <- df_train |> tidyr::drop_na()
df_test  <- df_test  |> tidyr::drop_na()

# A little bit of verbose output:
n_tot <- nrow(df_train) + nrow(df_test)

perc_cal <- (nrow(df_train) / n_tot) |> round(2) * 100
perc_val <- (nrow(df_test)  / n_tot) |> round(2) * 100

cat("For model training, we have a calibration / validation split of: ",
    perc_cal, "/", perc_val, "%")
```

### Model training

```{r}
rf_waterlog <- ranger::ranger( 
  y = df_train[, target],         # target variable
  x = df_train[, predictors_all], # Predictor variables
  probability = TRUE,             # Set true for categorical variable
  seed = 42,                      # Seed to reproduce randomness
  num.threads = parallel::detectCores() - 1) # Use all but one CPU
```

::: callout-warning
Note that we are skipping variable selection here to keep it brief.
:::

### Model testing

#### Model predictions

```{r}
# Make predictions for validation sites
prediction <- predict(
  rf_waterlog,           # RF model
  data = df_test,   # Predictor data
  num.threads = parallel::detectCores() - 1)

# Save predictions to validation df
# First row holds probability for reference level
df_test$pred <- prediction$predictions[, 1]
```

#### Model metrics

For our predictions, we now have a probabilities for the reference level of our target. To turn this into the original factor levels of 0 and 1, we have to map a threshold to these probabilities. Here, we use a threshold of 50%, which may or may not be optimal - a discussion for another course.

```{r}
# Set threshold
thresh <- 0.5

# Translate probability values into comparable factor levels
df_test$pred_lvl <- factor(
 df_test$pred > thresh, 
 levels = c(TRUE, FALSE), 
 labels = levels(df_test[[target]])
 )
```

Due to the target variable being a categorical variable, we have to use different model metrics to evaluate our model. See [AGDS Book Chapter 8.3](https://geco-bern.github.io/agds/regressionclassification.html#extra-material) for a comprehensive introduction to metrics for categorical variables. To get started, we need a confusion matrix. This 2$\times$2 matrix shows all model predictions and whether they were true/false positives/negatives. Have a look at the table printed below. You can see that in the top left cell, 186 predictions for non-waterlogged sites and zero predictions for waterlogged sites were correct. However, our model predicted 13 times that a site would be waterlogged although it was not, and 1 times that the site was waterlogged when it was dry instead.

```{r}
# Create confusion matrix
ma_conf <- table(
  predicted = df_test[[target]],
  observed  = df_test$pred_lvl
  )

# Display confusion matrix
ma_conf 
```

From these predictions, we can calculate [many](https://en.wikipedia.org/wiki/Confusion_matrix) different metrics and the {verification} package provides a nice short-cut to get them. Depending on your requirements that your model should meet, you want to investigate different metrics. Here, we will have a look at some more general ones:

```{r}
# Compute statistics
l_stat <- verification::multi.cont(ma_conf) 

# Print output
cat(
  "The model showed:",
  "\n a percentage of correct values of: ", l_stat$pc,
  "\n a bias of (dry / wet predictions): ", round(l_stat$bias, 2),
  "\n a Peirce Skill Score of: ", round(l_stat$ps, 2))
```

These metrics looks quite good! We see that in 93% of all cases, our model predicted the water status of a soil location accurately \[(184+2)/(184+12+2+2) = 0.93\]. The model showed no bias when predicting at dry sites but tends predict waterlogging even for dry sites (predicted 12 times a site is wet when it was dry). But note that this could also be a consequence of our data being skewed towards many more dry than wet sites.

The Peirce Skill Score answers the question of "How well did the forecast separate 'yes' events from 'no' events".[^04-model_test-1] This means how well our model separated dry from wet sites. The score has a range of \[-1, 1\] where 1 means that there is a perfect distinction, -1 means that the model always gets it wrong (so, simply taking the opposite of the prediction always get it right), and 0 means that the model is no better than guessing randomly. We see that our model has a score of 0.44, which means that is certainly better than just random predictions but - in line with the bias - tends to predict dry sites to be wet.

[^04-model_test-1]: See this useful page on forecast verification: [https://www.cawcr.gov.au/projects/verification/](https://www.cawcr.gov.au/projects/verification/https://www.cawcr.gov.au/projects/verification/)

> **Note:** The Peirce Skill Score is originally from *Peirce, C. S., 1884: The numerical measure of the success of predictions. Science, 4, 453--454*. But it has been re-discovered several times since, which is why it also often referred to as "Kuipers Skill Score" or "Hanssen-Kuiper Skill Score", or "True Skill Statistic".

<!-- TODO: Unclear from what Maldene wanted to do in her script with the OOB statistics: I could not make sense of this OOB statistics, the object `randomForest.model.pnd` does not exist when loading the respective `.Rdata` file and there is no code for producing it. Is this meant for the pH or waterlog prediction? -->

<!-- ```{r} -->

<!-- # 4) Validation statistics for OOB, advanced -----  -->

<!-- # load saved model -->

<!-- ( load("4_intermediate_data/randomForest_model_for_topsoil_ph0_10cm.RData") ) -->

<!-- randomForest.model <- randomForest.model.png -->

<!-- # Inside the model object we can find the OOB predictions  -->

<!-- pred <- randomForest.model$predictions -->

<!-- # In the calibration data we find the observed values -->

<!-- obs <- d.calibration[, name.target] -->

<!-- # compare OOB predictions with observed, continue as above  -->

<!-- error <- obs - pred  -->

<!-- ## ...  -->

<!-- ``` -->

#### Metric plots

Let's create a combined violin-box-plot to get a better feeling for our predictions. The plot below visualizes what we already learned from the model metrics. That is, that our model tends to predict dry sites quite well (see how close the median is to 1?) but suffers from a few outliers. If we were to increase the prediction threshold `thresh` defined above, our model would perform words, as more outliers fall below the threshold. Also, the prediction for wet sites is not very clear as indicated by the relatively even distribution of predicted probabilities, and the median at around 75%.

```{r}
df_test |> 
  ggplot2::ggplot() +
  ggplot2::aes(x = waterlog.30, y = pred, fill = waterlog.30) +
  ggplot2::geom_violin() +
  ggplot2::geom_boxplot(width = 0.07) +
  ggplot2::labs(
    title  = "Prediction of Water Status at 30cm",
    y      = "Predicted Probability",
    x      = "Observed Status",
    fill   = "Water\nStatus"
  ) +
  ggplot2::geom_abline(
    intercept = thresh, 
    slope = 0, 
    linetype = "dotted"
    ) +
  ggplot2::ylim(0, 1) +
  ggplot2::theme_classic()
```

### Prediction map

Note that we have not conducted any variable selection for this simplified example. Thus, we have to create a new raster stack with all predictors and cannot re-use the subset that we used for predicting pH.

```{r}
# Get a list of all covariate file names
files_covariates <- list.files(
  path = here::here("data-raw/geodata/covariates/"), 
  pattern = ".tif$",
  recursive = TRUE, 
  full.names = TRUE
  )

# Load all rasters as a stack
raster_covariates <- terra::rast(files_covariates)

# Get coordinates for which we want data
df_locations <- df_mask |> 
  dplyr::select(x, y)

# Extract data from covariate raster stack
df_predict <- terra::extract(
  raster_covariates,  # The raster we want to extract from
  df_locations,  # A matrix of x and y values to extract for
  ID = FALSE    # To not add a default ID column to the output
  )

df_predict <- cbind(df_locations, df_predict)
```


```{r}
# Attaching reference timeset levels from prepared dataset
bern_cov <- readRDS(here::here("data/bern_sampling_locations_with_covariates.rds"))

df_predict$timeset <- "d1979_2010"
levels(df_predict$timeset) <- c(unique(bern_cov$timeset))

# Define numerically encoded categorical variables 
cat_vars <- df_predict |> 
  
  # Get number of distinct values per variable
  dplyr::summarise(dplyr::across(dplyr::everything(), ~ dplyr::n_distinct(.))) |> 
  
  # Turn df into long format for easy filtering
  tidyr::pivot_longer(dplyr::everything(), 
                      names_to = "variable", 
                      values_to = "n") |> 
  
  # Filter out variables with 10 or less distinct values
  dplyr::filter(n <= 10) |>
  
  # Extract the names of these variables
  dplyr::pull('variable')

df_predict <- df_predict |> 
  dplyr::mutate(dplyr::across(cat_vars, ~ as.factor(.)))

# Reduce dataframe to hold only rows without any NA values
df_predict <- df_predict |> 
  tidyr::drop_na()

# Display final dataframe
head(df_predict) |> 
  knitr::kable()
```

Now that we have our predictor raster again, we can make our predictions and plot them.

```{r}
# Make predictions using the RF model
prediction <- predict(
  rf_waterlog,              # RF model
  data = df_predict,   # Predictor data
  num.threads = parallel::detectCores() - 1)

# Attach predictions to dataframe and round them
df_predict$prediction <- round(prediction$predictions[,1], 2)
```

::: callout-tip
Note the difference to the regression task before: To access the predicted probabilities, we need to use `prediction$predictions[,1]`.
:::

```{r}
# Extract dataframe with coordinates and predictions
df_map <- df_predict |> 
  dplyr::select(x, y, prediction)

# Turn dataframe into a raster
raster_pred <- terra::rast(
  df_map,                  # Table to be transformed
  crs = "+init=epsg:2056", # Swiss coordinate system
  extent = terra::ext(raster_covariates) # Prescribe same extent as predictor rasters
  )
```

```{r}
# Let's have a look at our predictions!
# To have some more flexibility, we can plot this in the ggplot-style as such:
ggplot2::ggplot() +
  tidyterra::geom_spatraster(data = raster_pred) +
  ggplot2::scale_fill_viridis_c(
    na.value = NA,
    option = "viridis",
    name = "Probability"
    ) +
  ggplot2::theme_classic() +
  ggplot2::scale_x_continuous(expand = c(0, 0)) +
  ggplot2::scale_y_continuous(expand = c(0, 0)) +
  ggplot2::labs(title = expression(paste("Predicted probability for ", 
                                         italic(bold("no")), 
                                         " waterlogging at 30 cm depth")))
```
